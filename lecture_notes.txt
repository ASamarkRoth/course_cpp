Lecture 1, 16/1
cerr << = cout with error encoded output
Within class declaration (in .h) of a function <-> inline function
Memory leak <-> unused memory, e.g. forgotten used memory somewhere
dangling pointer - a pointer to a deallocated object, i.e. deleted object but not pointer!?

Lecture 2, 19/1
Avoid allocating on heap, stack is preferred.
new = allocated on heap!!
std::unique_ptr - safe pointers delete the objects when the pointers are destroyed
member functions polymorphic in inheritance -> declare virtual
Slide 25 = interesting calling member functions
Namespaces - using Graphics::Point -> only need to write Point();
Why not use namespaces? - namespace spreads via include.h, could be unknown for users. Hence not in .h!
operator overloading: Complex::operator+(const Complex& c)
virtual - this keyword is not necessary in derived class member functions. It is nice to add "override" in the declaration for the compiler for some reason.
# starting lines -> talking to preprocessor
	use: nice to choose what parts of the program to compile
int& is a reference, cf. alias and this is NOT the same as &val which is memory!?
using *ptr is called dereferencing

Lecture 3, 23/1
Define tailor made types, useful in function returns of something made-up, e.g.: 
	using counter_type = unsigned long
	typedef table_type std::vector<int>
auto = type specifier -> compiler deduces type
	auto does not work automatically with references!
	can write: const auto d = 0;
	and auto&
lambda function =?
decltype Type specifier
	interprets the return of a function as the type
	sometype f() {...}
	decltype(f()) sum = 0;
	useful e.g. with template functions where the type is not known precompilation
Classes can have embedded types, e.g. string::size_type
x = i++; (x = i and then i gets incremented)
x = ++i (i gets incremented and x = i+1); THIS IS TO BE PREFERRED DUE TO UNNECESSARY COPY. Copies involve memory modification and additional operations.
ITERATOR: pointer to an element in container, can step around in the container
Containers (e.g. vectors, strings) have begin() and end() which returns an iterator
Get element value of iterator -> use dereferencing
const iterator exists, e.g. cbegin();
Say we do: int x[3]; then the following expressions are equal:
	int* y = x+1;
	int* y = &x[1];
Get iterator from array: begin(x) (arrays are not objects!)
if the size of the array is unknown, it is necessary to allocate them on the heap (!) with new. 
	deallocate such an array: delete[] x;
OBS: range based for-loops with references are awesome!

Lecture 4, 26/1
Vector data is allocated on heap
type conversions:
	static_cast<type>(variable) - standard!?
	dyamic_cast<type>(pointer) - downcasting in an inheritance hierachy
		needs virtual function to work (in mother)
	const_cast<> - remove constness from variable
Standard exception classes: exception, runtime_error, range_error, logic_error
	throw runtime_error("Wrong parameter values!");
	try{ program code}
	catch(runtime_error& err) {error handling code}
Functions:
	inline functions must be defined in header files.
	constexpr function -> compiler performs some calculations to enable const returns
	possible with static variable in global function!
Aktivitetsposter?
function args: slides 78-80!
	if object is on stack -> send by reference
	if object is on heap -> send by pointer
int* const = a const pointer to int
int const * const = a const pointer to a const int
initializer_list = {1,2,3} : possible to pass in function arrays
reference can be used as return - see slide 85!
never return a reference/pointer to a local object

Lecture 5, 30/1
Functions returning references : Study slide 85!!
Don't need variable names in function argument declarations, i.e. in .h
Overloading functions is possible - ?
Default function/method arguments possible. Works as usual, they need to be trailing (i.e. last)
Pointers to functions - may be passed as arguments to functions : provided slide 90
Classes refers to eachother, e.g. class A has a pointer to B and vice versa, compiler takes it in order of declaration. Solution:
	forward declaration: Class B;
Default: class = private & struct = public
Friend class: has access to private variables of this - see slide 97
mutable member variable - Can change this member variable in a const object.
Constructor initializer should be preferred! The effect is an overwrite within {} since e.g. string s1 runs the default constructor.
It is possible with multiple constructors - se slide 103-104
Keyword explicit -> the input argument must be as declared!!

Lecture 6, 6/2
class allocator deals with raw memory, reserve raw memory without initialisation: slides 114-115
	allocator<Point> alloc;
	auto p = alloc.allocat(10);
	alloc.construct for initialisation
	alloc.destroy for execute ~
Reference and value semantics - slides 116-117
Copying objects : slide 119
	initialisation is different from assignment!
	Person p3 = p1; //copy constructor is run
	Person p4("Alice");
	p1 = p4; // operator=()!?
	Person& operator=(const Person&) = delete; //copy constructor delete!
Two different copies: shallow and deep. 
	Shallow: blunt copy of bites on the stack (de nada with pointer)
		E.g. a class with a string member. String has copy constructor-> shallow copy, this is executed and we are fine
	Deep: copy of stacks and heap data
General class, rule of five: constructor, destructor, assignment operator, move constructor, move assignment operator
Templates:
	template <typename T> //in header file
	inline void swap(T& a, T& b) {...}
Move constructor: moving the pointer of one object to another one and setting the pointer of the first one to nullptr
	indicated with && in constructor
	compiler needs to be certain that the previous one is not to be used anymore
	nice with temporary values: a = b+c : (b+c) is a temporary, return is a temporar
	a reference to an rvalue=temporary: &&
lvalue & rvalue : slide 136
	lvalue: variable
	rvalue <-> temporary
noexcept: informs compiler that the constructor will not throw any exception. Important for certain std::containers for them to use move constructor.
operator=(): can also be adjusted for rvalues, with a move assignment implementation
force move: std::move();

Lecture 7, 9/2 (was absent):
TEMPLATES:
Difference function templates and class templates! 
When a template function is called the typename parameters are instantiated to its' given types.
Remember: the objects used in the template function needs the operators used implemented. 
	Concept: set of requirements that a template argument must meet
		Default constructible
		Assignable
		LessThanComparable 
		EqualityComparable
	Model: An entity that meets the requirements of a concept is a model of the concept.
Explicit instantiation:
	compare<double>(i,d) (even though int i and double d this works!)
When unknown return type, use keyword auto!
decltype - inspects the declared type of an entity!?
As with inline functions, template functions should be defined in header, since the code needs to be generated at call site
OVERLOADING:
Except: ::, ., .*, ?, :, sizeof
For classes: assignment =, subscript [], call (()) and member access -> must be member
	++, +=  should be members
	+,*,== should be non members
Explicit initialisation: with explicit keyword, this does not allow copy construction?
When implementing ==, != should also be implemented. These should be global functions since they don't change any state. Use friend keyword to enable access for private members. If == is implemented then operator!=: return !(lhs == rhs)

Lecture 8, 13/2
CLASS TEMPLATES:
Implement templates in header!
Stack<char> is especially needed for template classes
Template parameters may have default types and values
	non-type may also be used e.g. <T = int, size_t size = 100>
STANDARD LIBRARY:
Containers: vectors, maps, stacks, queues
Algorithms: operations on containers (sort, copy...)
Iterators: iterating containers

To define an iterator yourself which you can use with stdlib, overload the following operators (see slide 221):
	++ (for next)
	(begin())
	(end())
	!=
	* (dereference)
	assignable!
Different iterators: InputIterator (only reads) , OutputIterators (only writes to data structure)
	insert_iterator
	istream_iterator!
Copy algorithm is nice with iterator and construct + mod of container
Read entire file into 1 string:
	string s((istream_iterator<char>(ifstream("..."))), istream_iterator())

Lecture 9, 16/2 (absent)
Function objects can be passed as arguments to algorithms in std::
It is possible to overload the function call operator()! and thus to pass the class/struct as a function argument
The function objects are sometimes called functors!
E.g. provide whatever function or function object:
	template <typename It, typename op>
	Op for_each(It beg, It end, Op op) {
		for(; beg != end; ++beg) {
			op(*beg);
		}
		return op;
	}
The function object can store sweet variables, such as: 
	bool exists_smaller(const vector<int>& v, int value) {
		return find_if(v.begin(), v.end(), Less(value)) != v.end();
	}
In c++11 we have lambda function:
	bool exists_smaller(const vector<int>& v, int value) {
		return find_if(v.begin(), v.end(), 
		[value](int x) {return x < value;}) != v.end();
	}
	[value] : access the variable value in the current scope also [&value]
		
